#!/bin/bash
################################################################################
help(){
	echo "Copy input file name to new file with file ending NAME.orig.sha256.SHA256SUM."
	echo "Where NAME is the input file name and SHA256SUM is the files sha256sum."
#	echo "Adding option -i as the first argument attempt to invert the process."
}
################################################################################
OPERATION="normal" # normal,invert,clean
PATTERN='\.orig\.sha256\.[a-f0-9]{64}'
################################################################################
# Parse arguments

SHORT_ARGS='ich'
LONG_ARGS='invert,clean,help' # Comma separated

# CONTINUE FROM HERE!
# https://www.unix.com/unix-for-beginners-questions-and-answers/270738-eval-set-more.html
# The post from corona688 pretty much explain what the example is doing.

# We put the parsed options in a variable for now since we want to check getopts
# return value. Using getopt together with set would have removed the return val
options=$(getopt -o "$SHORT_ARGS" --long "$LONG_ARGS" -- "$@")

if [ $? -ne 0 ]; then
	echo 'getopt could not parse input. Terminating...' 1>&2
	usage
	exit 1
fi
eval set -- "$options" # Changing positional params to getopt filtered version of them.
unset options # We don't need the options any more.

# consume 1-2 positional params as flags at the time until there are no more.
while true
do
	case "$1" in
		'-i' | '--invert' )
			OPERATION="invert"
			shift
			continue
			;;
		'-c' | '--clean')
			OPERATION="clean"
			shift
			continue
			;;
		'-h' | '--help')
			help
			exit
			#shift
			#continue
			;;
		'--') # End of flagged params
			shift
			break # Break while loop
			;; # Put here because it doesn't feel right to remove it
		*)
			echo "We shouldn't get here. Terminating ..." >&2
			exit 1
	esac
done
################################################################################
if [ $# -ne 1 ] ; then
	help
	exit 1
fi
case "$OPERATION" in
	"normal" )
		cp $1 $1.orig.sha256.$(sha256sum $1 | cut -f 1 -d ' ')
		if [ $? -ne 0 ]; then
			echo "Something went wrong during copy." 1>&2
			exit 1
		else
			echo "Copy made."
			exit 0
		fi
		;;
	"invert" )
		echo "Inverting..."
		# Count found files
		result=$(ls -d $1* | grep -E "$PATTERN" | wc -l)
		if [ $result -ne 1 ]; then
			echo "Found $result sha'd files. Expected 1." 1>&2
			echo "Resolve this message by making sure there is only one sha'd file." 1>&2
			echo "Exiting ..." 1>&2
			exit 1
		fi
		filecopy=$(ls $1* | grep -E "$PATTERN")
		checksum_exp=$(echo $filecopy | grep -oE '[a-f0-9]{64}')
		checksum_cur=$(sha256sum $filecopy | cut -f 1 -d ' ')

		if [ "$checksum_cur" != "$checksum_exp" ]; then
			echo "Checksum of copy doesn't match the expected one." 1>&2
			echo "Resolve by making the checksum equal to the sum in the file name." 1>&2
			echo "Exiting ..." 1>&2
			exit 1
		fi
		echo "Moving: " $filecopy
		mv $filecopy $1
		echo "Done!"

		exit 0
		;;
	"clean" )
		echo "Removing sha'd copies of $1"
		result=$(ls -d $1* | grep -E "$PATTERN" | wc -l)
		if [ $result -eq 0 ]; then
			echo "Found $result sha'd files. Expected at least 1." 1>&2
			echo "Resolve this message by making sure there is one or more sha'd files." 1>&2
			echo "Nothing to remove." 1>&2
			exit 1
		else
			ls $1.* | grep -E "$PATTERN" | xargs -d "\n" rm
			echo "$result sha'd copies of $1 removed."
		fi
		;;
	*)
		echo "We shouldn't get here. Terminating ..." >&2
		exit 1
esac
